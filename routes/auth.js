const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = 'jsonwebtoken';
const db = require('../config/db');
const mailer = require('../config/mailer');
const { registerValidation, loginValidation } = require('../middleware/validation');
const { validationResult } = require('express-validator');

const router = express.Router();
const jsonwebtoken = require('jsonwebtoken');

const createDefaultProfile = (id, email) => ({
  id,
  email,
  name: "New User",
  age: 25,
  occupation: "Digital Nomad",
  status: 'seeking_mate',
  bio: "Just moved here, looking for a great place to live and cool people to share it with. Let's connect!",
  likes: ["coffee", "hiking", "live-music"],
  dislikes: ["messiness"],
  rating: 5.0,
  pastStays: [],
  mediaPosts: [],
  isPremium: false,
  followers: 0,
  following: 0,
  likeCount: 0,
});


const signToken = (id) => {
  return jsonwebtoken.sign({ id }, process.env.JWT_SECRET, {
    expiresIn: process.env.JWT_EXPIRES_IN || '7d',
  });
};


/**
 * @route   POST /api/auth/register
 * @desc    Register a new user and notify admin
 * @access  Public
 */
router.post('/register', registerValidation, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const { email, password } = req.body;

    try {
        const userExists = await db.query('SELECT * FROM users WHERE email = $1', [email]);
        if (userExists.rows.length > 0) {
            return res.status(400).json({ msg: 'User with this email already exists' });
        }

        const salt = await bcrypt.genSalt(10);
        const password_hash = await bcrypt.hash(password, salt);
        
        const defaultProfile = createDefaultProfile(null, email); // ID will be generated by DB
        
        const query = `
            INSERT INTO users (email, password_hash, name, age, occupation, status, bio, likes, dislikes, rating, past_stays, media_posts, is_premium, followers, following, like_count)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)
            RETURNING id, name, age, occupation, status, bio, likes, dislikes, rating, past_stays, media_posts, is_premium, followers, following, like_count;
        `;
        const values = [email, password_hash, defaultProfile.name, defaultProfile.age, defaultProfile.occupation, defaultProfile.status, defaultProfile.bio, defaultProfile.likes, defaultProfile.dislikes, defaultProfile.rating, JSON.stringify(defaultProfile.pastStays), JSON.stringify(defaultProfile.mediaPosts), defaultProfile.isPremium, defaultProfile.followers, defaultProfile.following, defaultProfile.likeCount];

        const { rows } = await db.query(query, values);
        const newUser = rows[0];

        const token = signToken(newUser.id);
        
        // Send admin notification email (fire and forget)
        const adminEmail = process.env.ADMIN_EMAIL;
        if (adminEmail) {
            mailer.sendMail({
                from: `"RentScout System" <${process.env.GMAIL_USER}>`,
                to: adminEmail,
                subject: 'ðŸŽ‰ New User Registration on RentScout!',
                text: `A new user has just registered on RentScout with the email: ${email}`,
                html: `<p>A new user has just registered on RentScout with the email: <b>${email}</b></p>`
            }).catch(err => console.error('Failed to send admin notification email:', err));
        }

        res.status(201).json({ token, user: newUser });

    } catch (err) {
        console.error(err.message);
        res.status(500).send('Server Error');
    }
});

/**
 * @route   POST /api/auth/login
 * @desc    Authenticate user and get token
 * @access  Public
 */
router.post('/login', loginValidation, async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const { email, password } = req.body;

    try {
        const result = await db.query('SELECT * FROM users WHERE email = $1', [email]);
        if (result.rows.length === 0) {
            return res.status(400).json({ msg: 'Invalid credentials' });
        }

        const user = result.rows[0];
        const isMatch = await bcrypt.compare(password, user.password_hash);

        if (!isMatch) {
            return res.status(400).json({ msg: 'Invalid credentials' });
        }
        
        const token = signToken(user.id);
        
        // Remove password hash from the user object before sending
        delete user.password_hash;

        res.json({ token, user });

    } catch (err) {
        console.error(err.message);
        res.status(500).send('Server Error');
    }
});


module.exports = router;